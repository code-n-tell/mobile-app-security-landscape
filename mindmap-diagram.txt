@startmindmap

<style>

node {
}

</style>

*[#orange] mobile-app
    *[#lightgreen] feature
        * component (what's being used?)
            *_ control
    *[#lightgreen] data-sharing
    *[#lightgreen] form-submission
    *[#lightgreen] search
    *[#lightgreen] file-upload
    *[#lightgreen] customer-service
    *[#lightgreen] launch-app
    *[#lightgreen] update-preferences

    left side

    *[#lightgreen] sign-in (proof of claim)
        * form-username
            *_ Biometric
                *_ Ensure cryptographic keys are stored in a {Secure Element}
                *_ Ensure biometric operations occur within the deviceâ€™s {Secure Element}
                *_ Ensure biometric template never leaves the device  
                *_ Ensure hardware-backed keys tied to biometrics are invalidated on biometric changes
            *_ Password
                *_ Ensure passwords are hashed with {Argon2id} key derivation function 
                *_ Ensure passwords are salted randomly with at least {16} bytes
                *_ Ensure a minimum length of {12} characters
                *_ Ensure a maximum length of {x} characters
                *_ Disallow the use of personal details, like {username, password}
                *_ Disallow the use of sequential patterns, like {123456}
                *_ Disallow the use of repeated characters, like {aaaaaa}
                *_ Disallow the use of common words, phrases, or combinations, like {Qwerty123}
                *_ Ensure the credential is rotated every {365} days
        * Guest
        * Multi-factor authentication
            *_ Ensure at least {2} authentication factors
        * Single sign-on
        * Passkey
        * One-time password
            *_ Ensure a minimum length of {6} characters
            *_ Ensure the credential is invalidated every {30} seconds
            *_ Ensure the credential is invalidated every {3} consecutive incorrect inputs are received
        * Session id
            *_ Disallow session ids that return HTTP response status code {401, 403} 
            *_ Ensure session ids are generated using cryptographically secure random number generator with a minimum of {n}-bits of entropy
            *_ Ensure session ids are transmitted through HTTP headers like {Authorization} or cookies with {HttpOnly, Secure} flags enabled
            *_ Ensure session ids are generated using cryptographically strong algorithm, like {SHA-256}
            *_ Ensure session ids are used over {HTTPs}
            *_ Disallow storing session ids in persistent storage, like {localStorage, sessionStorage}
            *_ Ensure valid session ids return HTTP response status code {200}
        * JWT token
            *_ Disallow invalid tokens that return HTTP response status code {401, 403}
            *_ Ensure tokens are transmitted through HTTP headers like {Authorization}
            *_ Ensure bearer authentication is used over {HTTPs}
            *_ Disallow the inclusion of sensitive data in a token, like {username, password}
            *_ Disallow storing tokens in persistent storage, like {localStorage, sessionStorage}
            *_ Ensure valid tokens return HTTP response status code {200}
            *_ Ensure tokens are signed using cryptographically strong algorithm, like {HS256}
            *_ Disallow tokens signed using algorithm, like {none}
        * Credential stuffing prevention - access control
            *_ Ensure account access is rate limited with {3} tries every {10} minutes
            *_ Ensure account access is incrementally delayed after {3} consecutive incorrect attempts, with the delay increasing {base delay x multiplier ^ (attempt-1)} each time, capped at {1440} minutes
            *_ Ensure account access is suspended after {3} consecutive incorrect attempts
        * Anti-bot prevention - CAPTCHA
        * Error messages
    *[#lightgreen] sign-out
        * Session id
            *_ Ensure user's session id is terminated and related data is invalidated after {n} seconds of logout / inactivity / app closure
        * JWT token
            *_ Ensure user's token is terminated and related data is invalidated after {n} seconds of logout / inactivity / app closure
            *_ Ensure invalid tokens return HTTP response status code {401, 403}
    *[#lightgreen] update-transfer-funds-limit
        * Fraud detection
            *_ Ensure a {12} hours cooling-off period
    *[#lightgreen] transfer-funds-overseas
        * Fraud prevention
            *_ Ensure overseas transfer is disabled by default
            *_ Ensure overseas transfer is enabled through MFA
    *[#lightgreen] transfer-funds
        * Session identifiers
            *_ Ensure existing session identifier is replaced with a new session identifier after step-up authentication 
            *_ Ensure user's session is terminated after {n} seconds of inactivity
        * Fraud detection
            *_ Ensure {in-app, email, sms} alerts are enabled
        * Fraud prevention
            *_ Ensure a transaction exceeding ${n} is confirmed by user response within {n} seconds
        * Transaction history
            *_ Ensure account balance is updated within {n} seconds of a transaction
        * Alerts
            *_ Disallow displaying sensitive data, like {username, password}
    *[#lightgreen] access-resource
        * Client-side authorisation
            *_ Disallow client-side authorisation
        * Role-based access control
            *_ Disallow {*} permissions
        * Time-based access control
            *_ Ensure access is from {n} hours to {m} hours
        * Context-based access control
            *_ Ensure context, like {user patterns, user device type, user device location, user device state} are checked
    *[#lightgreen] grant-permission
        * App manifest
            *_ Disallow {CAMERA, LOCATION, MICROPHONE} permissions granted at intall-time
        * Prompt dialog
            *_ Ensure dialogs include the name of the permission {CAMERA}
            *_ Ensure dialogs include a short explanation of why its needed {to take profile photos}
            *_ Ensure dialogs include a description of the user benefit {so you can personalise your photos}
    *[#lightgreen] update-preferences
        * database-key-value (sharedpreferences)
            *_ Ensure user-related preference is deleted {n} days after {m} requests
    *[#lightgreen] web-browsing
        * URL link
        * Cookie
            *_ Ensure {webview, custom HTTP clients} cookies do not persist after app closure
    *[#lightgreen] setup-account
        * form-username
            *_ Ensure username is tokenised with at least {128} bits
        * application programming interface
        * database
    *[#lightgreen] delete-account
        * form-username
        * application programming interface
        * database-relational (MySQL)
            *_ Ensure user-related records are deleted within {n} seconds after request
@endmindmap